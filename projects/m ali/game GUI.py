import tkinter
from tkinter import ttk
import mqtt_remote_method_calls as com
import random
import string
 


def main():
    mqtt_client = com.MqttClient()
    mqtt_client.connect_to_ev3()

    root = tkinter.Tk()
    root.title("The Scribe")

    main_frame = ttk.Frame(root, padding=100)
    main_frame.grid()

    game_label = tkinter.Label(main_frame, text="The Scribe\n\n", font=(
        "MS Sans Serif", 24), fg='maroon')
    game_label.grid(row=0, column=0)

    start_game_button = ttk.Button(main_frame, text="Begin")
    start_game_button.grid(row=3, column=0)
    start_game_button['command'] = lambda: main_interface(root)

    root.mainloop()


def main_interface(root):
    root.withdraw()

    mqtt_client = com.MqttClient()
    mqtt_client.connect_to_ev3()

    new_game_window = tkinter.Toplevel()
    new_game_window.title("Select")

    frame_2 = ttk.Frame(new_game_window, padding=80)
    frame_2.grid()

    missions_label = tkinter.Label(frame_2, text="Pick a mode\n", font=(
        "MS Sans Serif", 26), fg='maroon')
    missions_label.grid(row=0, column=0)

    manual_button = tkinter.Button(frame_2, text="Manual\n")
    manual_button.grid(row=1, column=0, pady=20)
    manual_button['command'] = lambda: manual(new_game_window)

    automatic_button = tkinter.Button(frame_2, text="Automatic\n")
    automatic_button.grid(row=2, column=0, pady=20)
    automatic_button['command'] = lambda: automatic(new_game_window)

    exit_game_button = ttk.Button(frame_2, text="Exit")
    exit_game_button.grid(row=4, column=0)
    exit_game_button['command'] = lambda: exit(mqtt_client, True)


def manual(new_game_window):
    new_game_window.destroy()
    manual_window = tkinter.Toplevel()
    manual_window.title("Manual Mode")
    frame_manual = ttk.Frame(manual_window, padding=80)
    frame_manual.grid()
    instructions_label = tkinter.Label(frame_manual, text="Trace the random letter generated by "
                                                          "controlling the robot")
    instructions_label.grid(row=0, column=0)

    letter = ttk.Label(frame_manual, text=random.choice(string.ascii_letters))
    letter.grid(row=2, column=0)
    done_button = ttk.Button(frame_manual, text="Quit")
    done_button.grid(row=4, column=0)
    done_button['command'] = lambda: exit(frame_manual, True)


def automatic(new_game_window):
    new_game_window.destroy()
    automatic_window = tkinter.Toplevel()
    automatic_window.title("Automatic Mode")
    frame_automatic = ttk.Frame(automatic_window, padding=80)
    frame_automatic.grid()
    instructions_label = tkinter.Label(frame_automatic, text="Pick a letter and watch the robot trace it")
    instructions_label.grid(row=0, column=0)
    entry = ttk.Entry(frame_automatic)
    entry.grid()
    enter = ttk.Button(frame_automatic, text="Enter")
    enter.grid(row=2, column=0)
    done_button = ttk.Button(frame_automatic, text="Quit")
    done_button.grid(row=6, column=0)
    done_button['command'] = lambda: exit(new_game_window, True)


def drawing_pad(new_game_window):
    new_game_window.destroy
    drawing_pad_window = tkinter.Toplevel()
    drawing_pad_window.title("Draw the letter")
    frame_drawing_pad_window = ttk.Frame(drawing_pad_window, padding=80)
    frame_drawing_pad_window.grid()
    instructions_label = tkinter.Label(frame_drawing_pad_window, text="draw the letter on the canvas")
    instructions_label.grid(columnspan=2)
    canvas = tkinter.Canvas(drawing_pad_window, background="lightgray", width=800, height=800)
    canvas.grid(columnspan=2)

    canvas.bind("<Button-1>", lambda event: manual(event, mqtt_client))

    # Make callbacks for the two buttons.
    clear_button = ttk.Button(frame_drawing_pad_window, text="Clear")
    clear_button.grid(row=3, column=0)
    clear_button["command"] = lambda: clear(canvas)

    quit_button = ttk.Button(frame_drawing_pad_window, text="Quit")
    quit_button.grid(row=3, column=1)
    quit_button["command"] = lambda: exit(mqtt_client)

    # Create an MQTT connection
    # DONE: 5. Delete the line below (mqtt_client = None) then uncomment the
    # code below.  It creates a real mqtt client.

    my_delegate = MyDelegate(canvas)
    mqtt_client = com.MqttClient(my_delegate)
    mqtt_client.connect("draw", "draw")

    root.mainloop()


class MyDelegate(object):

     def __init__(self, canvas):
            self.canvas = canvas

     def on_circle_draw(self, color, x, y):
            self.canvas.create_oval(x - 10, y - 10, x + 10, y + 10, fill=color, width=3)



def clear(canvas):
    canvas.delete("all")


def exit(mqtt_client, shutdown_ev3):
    if shutdown_ev3:
        print("\nGame Over")
        mqtt_client.send_message("shutdown")
    mqtt_client.close()
    exit()


main()
